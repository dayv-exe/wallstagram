AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for Hello Lambda + API Gateway with CORS + DynamoDB todos table!

Globals:
  Function:
    Timeout: 10
    Runtime: python3.13
    Handler: app.lambda_handler
    MemorySize: 512
    Environment:
      Variables:
        TABLE_NAME: !Ref UsersTable
        QUEUE_URL: !Ref PostCountQueue

Resources:

  PostCountDLQ:
    Type: AWS::SQS::Queue

  PostCountQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PostCountDLQ.Arn
        maxReceiveCount: 3


  AddPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      CodeUri: src/
      Handler: handlers/add_post.handler
      Description: Lambda function that add post to dynamodb
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /new
            Method: POST
            ApiId: !Ref WallApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Statement:
            Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt PostCountQueue.Arn

  UpdatePostCountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/update_post_count.handler
      Runtime: python3.13
      Architectures:
        - arm64
      Description: Updates post count for a user
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PostCountQueue.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - SQSPollerPolicy:
            QueueName: !GetAtt PostCountQueue.QueueName

  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      CodeUri: src/
      Handler: handlers/signup.handler
      Description: Lambda function that add user to dynamodb
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /signup
            Method: POST
            ApiId: !Ref WallApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable

  InteractionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      CodeUri: src/
      Handler: handlers/interactions.handler
      Description: Lambda function that allows users to follow or unfollow other users
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /user/{operation}/{target}
            Method: POST
            ApiId: !Ref WallApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable

  WallApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
        AllowOrigins:
          - '*'
        AllowHeaders:
          - '*'
      StageName: prod

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE

Outputs:
  WallApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${WallApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
